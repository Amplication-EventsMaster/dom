/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CampaignService } from "../campaign.service";
import { CampaignCreateInput } from "./CampaignCreateInput";
import { Campaign } from "./Campaign";
import { CampaignFindManyArgs } from "./CampaignFindManyArgs";
import { CampaignWhereUniqueInput } from "./CampaignWhereUniqueInput";
import { CampaignUpdateInput } from "./CampaignUpdateInput";
import { AdGroupFindManyArgs } from "../../adGroup/base/AdGroupFindManyArgs";
import { AdGroup } from "../../adGroup/base/AdGroup";
import { AdGroupWhereUniqueInput } from "../../adGroup/base/AdGroupWhereUniqueInput";
import { CampaignCountArgs } from "./CampaignCountArgs";

export class CampaignControllerBase {
  constructor(protected readonly service: CampaignService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Campaign })
  async createCampaign(
    @common.Body() data: CampaignCreateInput
  ): Promise<Campaign> {
    return await this.service.createCampaign({
      data: data,
      select: {
        comment: true,
        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Campaign] })
  @ApiNestedQuery(CampaignFindManyArgs)
  async campaigns(@common.Req() request: Request): Promise<Campaign[]> {
    const args = plainToClass(CampaignFindManyArgs, request.query);
    return this.service.campaigns({
      ...args,
      select: {
        comment: true,
        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Campaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async campaign(
    @common.Param() params: CampaignWhereUniqueInput
  ): Promise<Campaign | null> {
    const result = await this.service.campaign({
      where: params,
      select: {
        comment: true,
        createdAt: true,
        description: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Campaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCampaign(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() data: CampaignUpdateInput
  ): Promise<Campaign | null> {
    try {
      return await this.service.updateCampaign({
        where: params,
        data: data,
        select: {
          comment: true,
          createdAt: true,
          description: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Campaign })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCampaign(
    @common.Param() params: CampaignWhereUniqueInput
  ): Promise<Campaign | null> {
    try {
      return await this.service.deleteCampaign({
        where: params,
        select: {
          comment: true,
          createdAt: true,
          description: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/adGroups")
  @ApiNestedQuery(AdGroupFindManyArgs)
  async findAdGroups(
    @common.Req() request: Request,
    @common.Param() params: CampaignWhereUniqueInput
  ): Promise<AdGroup[]> {
    const query = plainToClass(AdGroupFindManyArgs, request.query);
    const results = await this.service.findAdGroups(params.id, {
      ...query,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        platform: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adGroups")
  async connectAdGroups(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() body: AdGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adGroups: {
        connect: body,
      },
    };
    await this.service.updateCampaign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adGroups")
  async updateAdGroups(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() body: AdGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adGroups: {
        set: body,
      },
    };
    await this.service.updateCampaign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adGroups")
  async disconnectAdGroups(
    @common.Param() params: CampaignWhereUniqueInput,
    @common.Body() body: AdGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adGroups: {
        disconnect: body,
      },
    };
    await this.service.updateCampaign({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/campaign-freeze")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CampaignFreeze(
    @common.Body()
    body: CampaignWhereUniqueInput
  ): Promise<string> {
    return this.service.CampaignFreeze(body);
  }

  @common.Post("/campaign/freeze")
  @swagger.ApiOkResponse({
    type: CampaignCountArgs,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FreezeCampaign(
    @common.Body()
    body: CampaignWhereUniqueInput
  ): Promise<CampaignCountArgs> {
    return this.service.FreezeCampaign(body);
  }
}
