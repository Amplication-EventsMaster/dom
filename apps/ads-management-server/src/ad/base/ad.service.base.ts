/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Ad as PrismaAd,
  AdGroup as PrismaAdGroup,
} from "@prisma/client";

export class AdServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AdCountArgs, "select">): Promise<number> {
    return this.prisma.ad.count(args);
  }

  async ads<T extends Prisma.AdFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdFindManyArgs>
  ): Promise<PrismaAd[]> {
    return this.prisma.ad.findMany<Prisma.AdFindManyArgs>(args);
  }
  async ad<T extends Prisma.AdFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdFindUniqueArgs>
  ): Promise<PrismaAd | null> {
    return this.prisma.ad.findUnique(args);
  }
  async createAd<T extends Prisma.AdCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdCreateArgs>
  ): Promise<PrismaAd> {
    return this.prisma.ad.create<T>(args);
  }
  async updateAd<T extends Prisma.AdUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdUpdateArgs>
  ): Promise<PrismaAd> {
    return this.prisma.ad.update<T>(args);
  }
  async deleteAd<T extends Prisma.AdDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdDeleteArgs>
  ): Promise<PrismaAd> {
    return this.prisma.ad.delete(args);
  }

  async getAdGroup(parentId: string): Promise<PrismaAdGroup | null> {
    return this.prisma.ad
      .findUnique({
        where: { id: parentId },
      })
      .adGroup();
  }
}
