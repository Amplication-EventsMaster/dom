/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdGroupService } from "../adGroup.service";
import { AdGroupCreateInput } from "./AdGroupCreateInput";
import { AdGroup } from "./AdGroup";
import { AdGroupFindManyArgs } from "./AdGroupFindManyArgs";
import { AdGroupWhereUniqueInput } from "./AdGroupWhereUniqueInput";
import { AdGroupUpdateInput } from "./AdGroupUpdateInput";
import { AdFindManyArgs } from "../../ad/base/AdFindManyArgs";
import { Ad } from "../../ad/base/Ad";
import { AdWhereUniqueInput } from "../../ad/base/AdWhereUniqueInput";

export class AdGroupControllerBase {
  constructor(protected readonly service: AdGroupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdGroup })
  async createAdGroup(
    @common.Body() data: AdGroupCreateInput
  ): Promise<AdGroup> {
    return await this.service.createAdGroup({
      data: {
        ...data,

        campaign: data.campaign
          ? {
              connect: data.campaign,
            }
          : undefined,

        category: data.category
          ? {
              connect: data.category,
            }
          : undefined,

        channel: data.channel
          ? {
              connect: data.channel,
            }
          : undefined,

        platform: data.platform
          ? {
              connect: data.platform,
            }
          : undefined,
      },
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        platform: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdGroup] })
  @ApiNestedQuery(AdGroupFindManyArgs)
  async adGroups(@common.Req() request: Request): Promise<AdGroup[]> {
    const args = plainToClass(AdGroupFindManyArgs, request.query);
    return this.service.adGroups({
      ...args,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        platform: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adGroup(
    @common.Param() params: AdGroupWhereUniqueInput
  ): Promise<AdGroup | null> {
    const result = await this.service.adGroup({
      where: params,
      select: {
        campaign: {
          select: {
            id: true,
          },
        },

        category: {
          select: {
            id: true,
          },
        },

        channel: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,

        platform: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdGroup(
    @common.Param() params: AdGroupWhereUniqueInput,
    @common.Body() data: AdGroupUpdateInput
  ): Promise<AdGroup | null> {
    try {
      return await this.service.updateAdGroup({
        where: params,
        data: {
          ...data,

          campaign: data.campaign
            ? {
                connect: data.campaign,
              }
            : undefined,

          category: data.category
            ? {
                connect: data.category,
              }
            : undefined,

          channel: data.channel
            ? {
                connect: data.channel,
              }
            : undefined,

          platform: data.platform
            ? {
                connect: data.platform,
              }
            : undefined,
        },
        select: {
          campaign: {
            select: {
              id: true,
            },
          },

          category: {
            select: {
              id: true,
            },
          },

          channel: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,

          platform: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdGroup(
    @common.Param() params: AdGroupWhereUniqueInput
  ): Promise<AdGroup | null> {
    try {
      return await this.service.deleteAdGroup({
        where: params,
        select: {
          campaign: {
            select: {
              id: true,
            },
          },

          category: {
            select: {
              id: true,
            },
          },

          channel: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,

          platform: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/ads")
  @ApiNestedQuery(AdFindManyArgs)
  async findAds(
    @common.Req() request: Request,
    @common.Param() params: AdGroupWhereUniqueInput
  ): Promise<Ad[]> {
    const query = plainToClass(AdFindManyArgs, request.query);
    const results = await this.service.findAds(params.id, {
      ...query,
      select: {
        adGroup: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ads")
  async connectAds(
    @common.Param() params: AdGroupWhereUniqueInput,
    @common.Body() body: AdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ads: {
        connect: body,
      },
    };
    await this.service.updateAdGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ads")
  async updateAds(
    @common.Param() params: AdGroupWhereUniqueInput,
    @common.Body() body: AdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ads: {
        set: body,
      },
    };
    await this.service.updateAdGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ads")
  async disconnectAds(
    @common.Param() params: AdGroupWhereUniqueInput,
    @common.Body() body: AdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ads: {
        disconnect: body,
      },
    };
    await this.service.updateAdGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
