/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdGroup } from "./AdGroup";
import { AdGroupCountArgs } from "./AdGroupCountArgs";
import { AdGroupFindManyArgs } from "./AdGroupFindManyArgs";
import { AdGroupFindUniqueArgs } from "./AdGroupFindUniqueArgs";
import { CreateAdGroupArgs } from "./CreateAdGroupArgs";
import { UpdateAdGroupArgs } from "./UpdateAdGroupArgs";
import { DeleteAdGroupArgs } from "./DeleteAdGroupArgs";
import { AdFindManyArgs } from "../../ad/base/AdFindManyArgs";
import { Ad } from "../../ad/base/Ad";
import { Campaign } from "../../campaign/base/Campaign";
import { Category } from "../../category/base/Category";
import { Channel } from "../../channel/base/Channel";
import { Platform } from "../../platform/base/Platform";
import { AdGroupService } from "../adGroup.service";
@graphql.Resolver(() => AdGroup)
export class AdGroupResolverBase {
  constructor(protected readonly service: AdGroupService) {}

  async _adGroupsMeta(
    @graphql.Args() args: AdGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdGroup])
  async adGroups(
    @graphql.Args() args: AdGroupFindManyArgs
  ): Promise<AdGroup[]> {
    return this.service.adGroups(args);
  }

  @graphql.Query(() => AdGroup, { nullable: true })
  async adGroup(
    @graphql.Args() args: AdGroupFindUniqueArgs
  ): Promise<AdGroup | null> {
    const result = await this.service.adGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdGroup)
  async createAdGroup(
    @graphql.Args() args: CreateAdGroupArgs
  ): Promise<AdGroup> {
    return await this.service.createAdGroup({
      ...args,
      data: {
        ...args.data,

        campaign: args.data.campaign
          ? {
              connect: args.data.campaign,
            }
          : undefined,

        category: args.data.category
          ? {
              connect: args.data.category,
            }
          : undefined,

        channel: args.data.channel
          ? {
              connect: args.data.channel,
            }
          : undefined,

        platform: args.data.platform
          ? {
              connect: args.data.platform,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AdGroup)
  async updateAdGroup(
    @graphql.Args() args: UpdateAdGroupArgs
  ): Promise<AdGroup | null> {
    try {
      return await this.service.updateAdGroup({
        ...args,
        data: {
          ...args.data,

          campaign: args.data.campaign
            ? {
                connect: args.data.campaign,
              }
            : undefined,

          category: args.data.category
            ? {
                connect: args.data.category,
              }
            : undefined,

          channel: args.data.channel
            ? {
                connect: args.data.channel,
              }
            : undefined,

          platform: args.data.platform
            ? {
                connect: args.data.platform,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdGroup)
  async deleteAdGroup(
    @graphql.Args() args: DeleteAdGroupArgs
  ): Promise<AdGroup | null> {
    try {
      return await this.service.deleteAdGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Ad], { name: "ads" })
  async findAds(
    @graphql.Parent() parent: AdGroup,
    @graphql.Args() args: AdFindManyArgs
  ): Promise<Ad[]> {
    const results = await this.service.findAds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Campaign, {
    nullable: true,
    name: "campaign",
  })
  async getCampaign(
    @graphql.Parent() parent: AdGroup
  ): Promise<Campaign | null> {
    const result = await this.service.getCampaign(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "category",
  })
  async getCategory(
    @graphql.Parent() parent: AdGroup
  ): Promise<Category | null> {
    const result = await this.service.getCategory(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Channel, {
    nullable: true,
    name: "channel",
  })
  async getChannel(@graphql.Parent() parent: AdGroup): Promise<Channel | null> {
    const result = await this.service.getChannel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Platform, {
    nullable: true,
    name: "platform",
  })
  async getPlatform(
    @graphql.Parent() parent: AdGroup
  ): Promise<Platform | null> {
    const result = await this.service.getPlatform(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
